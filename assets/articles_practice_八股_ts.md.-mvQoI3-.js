import{_ as e,c as d,o as r,ae as o}from"./chunks/framework.z0sZ1NT9.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/practice/八股/ts.md","filePath":"articles/practice/八股/ts.md"}'),a={name:"articles/practice/八股/ts.md"};function n(s,t,c,i,l,p){return r(),d("div",null,t[0]||(t[0]=[o('<h2 id="ts" tabindex="-1">TS <a class="header-anchor" href="#ts" aria-label="Permalink to &quot;TS&quot;">​</a></h2><h2 id="type和interface的区别" tabindex="-1">type和interface的区别 <a class="header-anchor" href="#type和interface的区别" aria-label="Permalink to &quot;type和interface的区别&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>特性</strong></th><th><strong>interface</strong></th><th><strong>type</strong></th></tr></thead><tbody><tr><td><strong>类型范围</strong></td><td>仅能定义对象、类、函数等结构类型</td><td>可表示任意类型（原始值、联合类型、交叉类型等）</td></tr><tr><td><strong>重复声明</strong></td><td>支持声明合并（同名自动合并）</td><td>不允许重复定义，会报错</td></tr><tr><td><strong>扩展方式</strong></td><td>通过<code>extends</code>继承（仅支持对象类型）</td><td>通过<code>&amp;</code>交叉类型合并（支持任意类型）</td></tr><tr><td><strong>实现类</strong></td><td>类可通过<code>implements</code>实现接口</td><td>类无法直接实现<code>type</code>（除非<code>type</code>是对象类型）</td></tr><tr><td><strong>元组类型</strong></td><td>不支持</td><td>可定义元组（如<code>type Tuple = [string, number]</code>）</td></tr><tr><td><strong>映射类型</strong></td><td>不支持</td><td>可使用映射类型（如<code>Readonly&lt;T&gt;</code>）</td></tr><tr><td><strong>与第三方库交互</strong></td><td>更常用（许多库使用<code>interface</code>定义 API）</td><td>较少直接使用</td></tr></tbody></table>',3)]))}const h=e(a,[["render",n]]);export{_ as __pageData,h as default};
